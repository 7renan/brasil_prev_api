version: "3.7"

services: # the different images that will be running as containers
    web: # service name
        #build the image for the web service from the dockerfile in parent directory.
        build: .
        # command directive passes the parameters to the service and they will be executed by the service. In this example, these are django commands which will be executed in the container where django lives.
        command: sh -c "python manage.py makemigrations &&
            python manage.py migrate &&
            python manage.py runserver 0.0.0.0:8000"
        # map data and files from parent directory in host to microservice directory in docker container
        volumes:
            - .:/microservice
            - static_volume:/home/app/microservice/static
        # file where env variables are stored. Used as best practice so as not to expose secret keys
        env_file:
            - .env # name of the env file
        environment:
            TESTING: "False"
            DEBUG: "True"
        # name of the image
        image: microservice_app
        ports:
            - "8000:8000"
        # expose the port to other services defined here so that they can access this service via the exposed port. In the case of Django, this is 8000 by default
        expose:
            - 8000 # retrieved from the .env file
        restart: always
        # cannot start if db service is not up and running
        depends_on:
            - db

    db: # service name
        image: postgres:latest
        restart: always
        volumes:
            - ./db-data/:/var/lib/postgresql/data/
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_DB=brasilprev
        ports:
            - "5432:5432"
        expose:
            - 5432

volumes:
    postgres_data:
    static_volume:
